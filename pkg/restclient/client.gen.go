// Package restclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package restclient

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	OAuth2Scopes = "OAuth2.Scopes"
)

// Defines values for ActionType.
const (
	BUY  ActionType = "BUY"
	SELL ActionType = "SELL"
)

// Defines values for LimitOrderRequestName.
const (
	LimitOrderRequestNameLIMIT  LimitOrderRequestName = "LIMIT"
	LimitOrderRequestNameMARKET LimitOrderRequestName = "MARKET"
)

// Defines values for MarketOrderRequestName.
const (
	MarketOrderRequestNameLIMIT  MarketOrderRequestName = "LIMIT"
	MarketOrderRequestNameMARKET MarketOrderRequestName = "MARKET"
)

// Defines values for OrderStatus.
const (
	CANCELLED OrderStatus = "CANCELLED"
	FILLED    OrderStatus = "FILLED"
	OPEN      OrderStatus = "OPEN"
	PARTIAL   OrderStatus = "PARTIAL"
)

// Defines values for OrderTypeName.
const (
	LIMIT  OrderTypeName = "LIMIT"
	MARKET OrderTypeName = "MARKET"
)

// Defines values for RecipientType.
const (
	LOCAL  RecipientType = "LOCAL"
	REMOTE RecipientType = "REMOTE"
)

// Defines values for SymbolType.
const (
	BCH  SymbolType = "BCH"
	BTC  SymbolType = "BTC"
	CMTN SymbolType = "CMTN"
	DOGE SymbolType = "DOGE"
	ETH  SymbolType = "ETH"
	UNI  SymbolType = "UNI"
)

// Defines values for TimeSpanType.
const (
	N10m  TimeSpanType = "10m"
	N12h  TimeSpanType = "12h"
	N15m  TimeSpanType = "15m"
	N180d TimeSpanType = "180d"
	N1d   TimeSpanType = "1d"
	N1h   TimeSpanType = "1h"
	N1y   TimeSpanType = "1y"
	N2d   TimeSpanType = "2d"
	N2h   TimeSpanType = "2h"
	N2w   TimeSpanType = "2w"
	N30d  TimeSpanType = "30d"
	N30m  TimeSpanType = "30m"
	N4h   TimeSpanType = "4h"
	N5m   TimeSpanType = "5m"
	N7d   TimeSpanType = "7d"
	N8h   TimeSpanType = "8h"
	N90d  TimeSpanType = "90d"
)

// Defines values for TransactionStatus.
const (
	COMPLETED TransactionStatus = "COMPLETED"
	FAILED    TransactionStatus = "FAILED"
	INITIATED TransactionStatus = "INITIATED"
)

// Defines values for TransactionType.
const (
	DEPOSIT  TransactionType = "DEPOSIT"
	ORDER    TransactionType = "ORDER"
	TRANSFER TransactionType = "TRANSFER"
)

// Balances account
type Account struct {
	Balances *BalanceList `json:"balances,omitempty"`
	Id       string       `json:"id"`
	PublicId string       `json:"public_id"`
}

// Action type: * `BUY` - use base currency to buy target currency * `SELL` - sell target currency for base currency
type ActionType string

// AddressItem defines model for AddressItem.
type AddressItem struct {
	// Address hash for funding this balance
	Address string `json:"address"`

	// Symbol Type: * `BTC` - bitcoin currency identifier * `ETH` - ethereum currency identifier * `BCH` - bitcoin cash currency identifier * `DOGE` - dogecoin currency identifier * `UNI` - uniswap currency identifer * `CMTN` - cipher mountain currency identifer
	Symbol SymbolType `json:"symbol"`
}

// BalanceItem defines model for BalanceItem.
type BalanceItem struct {
	Available CurrencyValue `json:"available"`
	Quantity  CurrencyValue `json:"quantity"`

	// Symbol Type: * `BTC` - bitcoin currency identifier * `ETH` - ethereum currency identifier * `BCH` - bitcoin cash currency identifier * `DOGE` - dogecoin currency identifier * `UNI` - uniswap currency identifer * `CMTN` - cipher mountain currency identifer
	Symbol SymbolType `json:"symbol"`
}

// BalanceList defines model for BalanceList.
type BalanceList = []BalanceItem

// BookOrder defines model for BookOrder.
type BookOrder struct {
	Guid string `json:"guid"`

	// Request to create a new order on the order book
	Order OrderRequest `json:"order"`

	// Symbol Type: * `OPEN` - incomplete order * `PARTIAL` - partial order * `FILLED` - filled order * `CANCELLED` - cancelled order
	Status OrderStatus `json:"status"`
}

// BookOrderList defines model for BookOrderList.
type BookOrderList = []BookOrder

// CurrencyValue defines model for CurrencyValue.
type CurrencyValue = string

// LimitOrderRequest defines model for LimitOrderRequest.
type LimitOrderRequest struct {
	// Symbol Type: * `BTC` - bitcoin currency identifier * `ETH` - ethereum currency identifier * `BCH` - bitcoin cash currency identifier * `DOGE` - dogecoin currency identifier * `UNI` - uniswap currency identifer * `CMTN` - cipher mountain currency identifer
	Base SymbolType `json:"base"`

	// Order type: * `MARKET` - order type used to buy or sell at market value * `LIMIT` - used to set buy or sell limit
	Name     LimitOrderRequestName `json:"name"`
	Price    CurrencyValue         `json:"price"`
	Quantity CurrencyValue         `json:"quantity"`
}

// Order type: * `MARKET` - order type used to buy or sell at market value * `LIMIT` - used to set buy or sell limit
type LimitOrderRequestName string

// MarketOrderRequest defines model for MarketOrderRequest.
type MarketOrderRequest struct {
	// Symbol Type: * `BTC` - bitcoin currency identifier * `ETH` - ethereum currency identifier * `BCH` - bitcoin cash currency identifier * `DOGE` - dogecoin currency identifier * `UNI` - uniswap currency identifer * `CMTN` - cipher mountain currency identifer
	Base SymbolType `json:"base"`

	// Order type: * `MARKET` - order type used to buy or sell at market value * `LIMIT` - used to set buy or sell limit
	Name     MarketOrderRequestName `json:"name"`
	Quantity CurrencyValue          `json:"quantity"`
}

// Order type: * `MARKET` - order type used to buy or sell at market value * `LIMIT` - used to set buy or sell limit
type MarketOrderRequestName string

// Request to create a new order on the order book
type OrderRequest struct {
	// Action type: * `BUY` - use base currency to buy target currency * `SELL` - sell target currency for base currency
	Action ActionType `json:"action"`

	// Symbol Type: * `BTC` - bitcoin currency identifier * `ETH` - ethereum currency identifier * `BCH` - bitcoin cash currency identifier * `DOGE` - dogecoin currency identifier * `UNI` - uniswap currency identifer * `CMTN` - cipher mountain currency identifer
	Base SymbolType `json:"base"`

	// Symbol Type: * `BTC` - bitcoin currency identifier * `ETH` - ethereum currency identifier * `BCH` - bitcoin cash currency identifier * `DOGE` - dogecoin currency identifier * `UNI` - uniswap currency identifer * `CMTN` - cipher mountain currency identifer
	Quote SymbolType       `json:"quote"`
	Type  OrderRequestType `json:"type"`
}

// OrderRequestType defines model for OrderRequestType.
type OrderRequestType interface{}

// Symbol Type: * `OPEN` - incomplete order * `PARTIAL` - partial order * `FILLED` - filled order * `CANCELLED` - cancelled order
type OrderStatus string

// OrderType defines model for OrderType.
type OrderType struct {
	// Order type: * `MARKET` - order type used to buy or sell at market value * `LIMIT` - used to set buy or sell limit
	Name OrderTypeName `json:"name"`
}

// Order type: * `MARKET` - order type used to buy or sell at market value * `LIMIT` - used to set buy or sell limit
type OrderTypeName string

// PatchCommand defines model for PatchCommand.
type PatchCommand struct {
	Op    string `json:"op"`
	Path  string `json:"path"`
	Value string `json:"value"`
}

// PatchCommandList defines model for PatchCommandList.
type PatchCommandList = []PatchCommand

// Price history item
type PriceHistoryItem struct {
	Average string `json:"average"`

	// Last price in time span
	Close         string `json:"close"`
	LowerQuartile string `json:"lowerQuartile"`
	Maximum       string `json:"maximum"`
	Median        string `json:"median"`
	Minimum       string `json:"minimum"`

	// First price in time span
	Open string `json:"open"`

	// Time Span: * `5m` - 5 minutes
	Span          TimeSpanType `json:"span"`
	Start         string       `json:"start"`
	UpperQuartile string       `json:"upperQuartile"`

	// Total volume during time span
	Volume string `json:"volume"`
}

// PriceHistoryList defines model for PriceHistoryList.
type PriceHistoryList = []PriceHistoryItem

// Recipient Type: * `LOCAL` - recipient public id within Xifer system * `REMOTE` - recipient value is an address defined by the provided symbol
type RecipientType string

// ResponseError defines model for ResponseError.
type ResponseError struct {
	Detail string `json:"detail"`
}

// Order book snapshot item
type SnapshotItem struct {
	Depth string `json:"depth"`
	Price string `json:"price"`
	Side  string `json:"side"`
}

// SnapshotItemList defines model for SnapshotItemList.
type SnapshotItemList = []SnapshotItem

// Symbol Type: * `BTC` - bitcoin currency identifier * `ETH` - ethereum currency identifier * `BCH` - bitcoin cash currency identifier * `DOGE` - dogecoin currency identifier * `UNI` - uniswap currency identifer * `CMTN` - cipher mountain currency identifer
type SymbolType string

// Time Span: * `5m` - 5 minutes
type TimeSpanType string

// Account balance change
type Transaction struct {
	// Time at which the transaction was processed. Refer to status for success or failure.
	Completed string        `json:"completed"`
	Fee       CurrencyValue `json:"fee"`

	// time at which the transaction was requested
	Initiated string        `json:"initiated"`
	Orderid   string        `json:"orderid"`
	Quantity  CurrencyValue `json:"quantity"`
	Receipt   string        `json:"receipt"`
	Recipient string        `json:"recipient"`

	// Transaction Status: * `INITIATED` - the transaction has been started * `COMPLETED` - the transaction was successful * `FAILED` - the transaction request failed
	Status TransactionStatus `json:"status"`

	// Symbol Type: * `BTC` - bitcoin currency identifier * `ETH` - ethereum currency identifier * `BCH` - bitcoin cash currency identifier * `DOGE` - dogecoin currency identifier * `UNI` - uniswap currency identifer * `CMTN` - cipher mountain currency identifer
	Symbol SymbolType `json:"symbol"`

	// Transaction Type: * `ORDER` - transaction resulting from a match on the order book * `DEPOSIT` - transaction resulting from a funding deposit * `TRANSFER` - transaction resulting from a funding withdrawal
	Type TransactionType `json:"type"`

	// Recipient Type: * `LOCAL` - recipient public id within Xifer system * `REMOTE` - recipient value is an address defined by the provided symbol
	Where RecipientType `json:"where"`
}

// TransactionList defines model for TransactionList.
type TransactionList = []Transaction

// Transfer funds locally between Xifer accounts or to an external account as a withdrawal.
type TransactionRequest struct {
	Quantity CurrencyValue `json:"quantity"`

	// Recipient represents a target identifier for which to send the defined funds. The format for the provided value is determined by the recipient type and symbol.
	Recipient string `json:"recipient"`

	// Symbol Type: * `BTC` - bitcoin currency identifier * `ETH` - ethereum currency identifier * `BCH` - bitcoin cash currency identifier * `DOGE` - dogecoin currency identifier * `UNI` - uniswap currency identifer * `CMTN` - cipher mountain currency identifer
	Symbol SymbolType `json:"symbol"`

	// Recipient Type: * `LOCAL` - recipient public id within Xifer system * `REMOTE` - recipient value is an address defined by the provided symbol
	Type RecipientType `json:"type"`
}

// Transaction Status: * `INITIATED` - the transaction has been started * `COMPLETED` - the transaction was successful * `FAILED` - the transaction request failed
type TransactionStatus string

// Transaction Type: * `ORDER` - transaction resulting from a match on the order book * `DEPOSIT` - transaction resulting from a funding deposit * `TRANSFER` - transaction resulting from a funding withdrawal
type TransactionType string

// AccountPathParam defines model for AccountPathParam.
type AccountPathParam = string

// MarketParam defines model for MarketParam.
type MarketParam = string

// Symbol Type: * `BTC` - bitcoin currency identifier * `ETH` - ethereum currency identifier * `BCH` - bitcoin cash currency identifier * `DOGE` - dogecoin currency identifier * `UNI` - uniswap currency identifer * `CMTN` - cipher mountain currency identifer
type OrderPathParam = SymbolType

// Symbol Type: * `OPEN` - incomplete order * `PARTIAL` - partial order * `FILLED` - filled order * `CANCELLED` - cancelled order
type OrderStatusParam = OrderStatus

// SymbolPathParam defines model for SymbolPathParam.
type SymbolPathParam = string

// Time Span: * `5m` - 5 minutes
type TimeSpanParam = TimeSpanType

// GetApiAccountsAccountIDOrdersParams defines parameters for GetApiAccountsAccountIDOrders.
type GetApiAccountsAccountIDOrdersParams struct {
	Status *OrderStatusParam `form:"status,omitempty" json:"status,omitempty"`
}

// PostApiAccountsAccountIDOrdersJSONBody defines parameters for PostApiAccountsAccountIDOrders.
type PostApiAccountsAccountIDOrdersJSONBody = OrderRequest

// PatchApiAccountsAccountIDOrdersOrderIDJSONBody defines parameters for PatchApiAccountsAccountIDOrdersOrderID.
type PatchApiAccountsAccountIDOrdersOrderIDJSONBody = PatchCommandList

// PostApiAccountsAccountIDTransactionsJSONBody defines parameters for PostApiAccountsAccountIDTransactions.
type PostApiAccountsAccountIDTransactionsJSONBody = TransactionRequest

// GetApiMarketsMarketHistoryParams defines parameters for GetApiMarketsMarketHistory.
type GetApiMarketsMarketHistoryParams struct {
	Increment *TimeSpanParam `form:"increment,omitempty" json:"increment,omitempty"`

	// Start time for history items
	Start *string `form:"start,omitempty" json:"start,omitempty"`

	// Limit for how many history items to retreive (no more than the default 100)
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostApiAccountsAccountIDOrdersJSONRequestBody defines body for PostApiAccountsAccountIDOrders for application/json ContentType.
type PostApiAccountsAccountIDOrdersJSONRequestBody = PostApiAccountsAccountIDOrdersJSONBody

// PatchApiAccountsAccountIDOrdersOrderIDJSONRequestBody defines body for PatchApiAccountsAccountIDOrdersOrderID for application/json ContentType.
type PatchApiAccountsAccountIDOrdersOrderIDJSONRequestBody = PatchApiAccountsAccountIDOrdersOrderIDJSONBody

// PostApiAccountsAccountIDTransactionsJSONRequestBody defines body for PostApiAccountsAccountIDTransactions for application/json ContentType.
type PostApiAccountsAccountIDTransactionsJSONRequestBody = PostApiAccountsAccountIDTransactionsJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiAccounts request
	GetApiAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiAccountsAccountID request
	GetApiAccountsAccountID(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiAccountsAccountIDAddressesSymbolName request
	GetApiAccountsAccountIDAddressesSymbolName(ctx context.Context, accountID AccountPathParam, symbolName SymbolPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiAccountsAccountIDCode request
	GetApiAccountsAccountIDCode(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiAccountsAccountIDOrders request
	GetApiAccountsAccountIDOrders(ctx context.Context, accountID AccountPathParam, params *GetApiAccountsAccountIDOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiAccountsAccountIDOrders request with any body
	PostApiAccountsAccountIDOrdersWithBody(ctx context.Context, accountID AccountPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAccountsAccountIDOrders(ctx context.Context, accountID AccountPathParam, body PostApiAccountsAccountIDOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiAccountsAccountIDOrdersOrderID request
	GetApiAccountsAccountIDOrdersOrderID(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiAccountsAccountIDOrdersOrderID request with any body
	PatchApiAccountsAccountIDOrdersOrderIDWithBody(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiAccountsAccountIDOrdersOrderID(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, body PatchApiAccountsAccountIDOrdersOrderIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiAccountsAccountIDTransactions request
	GetApiAccountsAccountIDTransactions(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiAccountsAccountIDTransactions request with any body
	PostApiAccountsAccountIDTransactionsWithBody(ctx context.Context, accountID AccountPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAccountsAccountIDTransactions(ctx context.Context, accountID AccountPathParam, body PostApiAccountsAccountIDTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiMarketsMarketHistory request
	GetApiMarketsMarketHistory(ctx context.Context, market MarketParam, params *GetApiMarketsMarketHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiMarketsMarketSnapshot request
	GetApiMarketsMarketSnapshot(ctx context.Context, market MarketParam, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiAccountsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiAccountsAccountID(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiAccountsAccountIDRequest(c.Server, accountID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiAccountsAccountIDAddressesSymbolName(ctx context.Context, accountID AccountPathParam, symbolName SymbolPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiAccountsAccountIDAddressesSymbolNameRequest(c.Server, accountID, symbolName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiAccountsAccountIDCode(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiAccountsAccountIDCodeRequest(c.Server, accountID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiAccountsAccountIDOrders(ctx context.Context, accountID AccountPathParam, params *GetApiAccountsAccountIDOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiAccountsAccountIDOrdersRequest(c.Server, accountID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAccountsAccountIDOrdersWithBody(ctx context.Context, accountID AccountPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAccountsAccountIDOrdersRequestWithBody(c.Server, accountID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAccountsAccountIDOrders(ctx context.Context, accountID AccountPathParam, body PostApiAccountsAccountIDOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAccountsAccountIDOrdersRequest(c.Server, accountID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiAccountsAccountIDOrdersOrderID(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiAccountsAccountIDOrdersOrderIDRequest(c.Server, accountID, orderID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiAccountsAccountIDOrdersOrderIDWithBody(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiAccountsAccountIDOrdersOrderIDRequestWithBody(c.Server, accountID, orderID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiAccountsAccountIDOrdersOrderID(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, body PatchApiAccountsAccountIDOrdersOrderIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiAccountsAccountIDOrdersOrderIDRequest(c.Server, accountID, orderID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiAccountsAccountIDTransactions(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiAccountsAccountIDTransactionsRequest(c.Server, accountID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAccountsAccountIDTransactionsWithBody(ctx context.Context, accountID AccountPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAccountsAccountIDTransactionsRequestWithBody(c.Server, accountID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAccountsAccountIDTransactions(ctx context.Context, accountID AccountPathParam, body PostApiAccountsAccountIDTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAccountsAccountIDTransactionsRequest(c.Server, accountID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiMarketsMarketHistory(ctx context.Context, market MarketParam, params *GetApiMarketsMarketHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiMarketsMarketHistoryRequest(c.Server, market, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiMarketsMarketSnapshot(ctx context.Context, market MarketParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiMarketsMarketSnapshotRequest(c.Server, market)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiAccountsRequest generates requests for GetApiAccounts
func NewGetApiAccountsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiAccountsAccountIDRequest generates requests for GetApiAccountsAccountID
func NewGetApiAccountsAccountIDRequest(server string, accountID AccountPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountID", runtime.ParamLocationPath, accountID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiAccountsAccountIDAddressesSymbolNameRequest generates requests for GetApiAccountsAccountIDAddressesSymbolName
func NewGetApiAccountsAccountIDAddressesSymbolNameRequest(server string, accountID AccountPathParam, symbolName SymbolPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountID", runtime.ParamLocationPath, accountID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "symbolName", runtime.ParamLocationPath, symbolName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/accounts/%s/addresses/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiAccountsAccountIDCodeRequest generates requests for GetApiAccountsAccountIDCode
func NewGetApiAccountsAccountIDCodeRequest(server string, accountID AccountPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountID", runtime.ParamLocationPath, accountID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/accounts/%s/code", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiAccountsAccountIDOrdersRequest generates requests for GetApiAccountsAccountIDOrders
func NewGetApiAccountsAccountIDOrdersRequest(server string, accountID AccountPathParam, params *GetApiAccountsAccountIDOrdersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountID", runtime.ParamLocationPath, accountID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/accounts/%s/orders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiAccountsAccountIDOrdersRequest calls the generic PostApiAccountsAccountIDOrders builder with application/json body
func NewPostApiAccountsAccountIDOrdersRequest(server string, accountID AccountPathParam, body PostApiAccountsAccountIDOrdersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAccountsAccountIDOrdersRequestWithBody(server, accountID, "application/json", bodyReader)
}

// NewPostApiAccountsAccountIDOrdersRequestWithBody generates requests for PostApiAccountsAccountIDOrders with any type of body
func NewPostApiAccountsAccountIDOrdersRequestWithBody(server string, accountID AccountPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountID", runtime.ParamLocationPath, accountID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/accounts/%s/orders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiAccountsAccountIDOrdersOrderIDRequest generates requests for GetApiAccountsAccountIDOrdersOrderID
func NewGetApiAccountsAccountIDOrdersOrderIDRequest(server string, accountID AccountPathParam, orderID OrderPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountID", runtime.ParamLocationPath, accountID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orderID", runtime.ParamLocationPath, orderID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/accounts/%s/orders/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiAccountsAccountIDOrdersOrderIDRequest calls the generic PatchApiAccountsAccountIDOrdersOrderID builder with application/json body
func NewPatchApiAccountsAccountIDOrdersOrderIDRequest(server string, accountID AccountPathParam, orderID OrderPathParam, body PatchApiAccountsAccountIDOrdersOrderIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiAccountsAccountIDOrdersOrderIDRequestWithBody(server, accountID, orderID, "application/json", bodyReader)
}

// NewPatchApiAccountsAccountIDOrdersOrderIDRequestWithBody generates requests for PatchApiAccountsAccountIDOrdersOrderID with any type of body
func NewPatchApiAccountsAccountIDOrdersOrderIDRequestWithBody(server string, accountID AccountPathParam, orderID OrderPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountID", runtime.ParamLocationPath, accountID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orderID", runtime.ParamLocationPath, orderID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/accounts/%s/orders/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiAccountsAccountIDTransactionsRequest generates requests for GetApiAccountsAccountIDTransactions
func NewGetApiAccountsAccountIDTransactionsRequest(server string, accountID AccountPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountID", runtime.ParamLocationPath, accountID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/accounts/%s/transactions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiAccountsAccountIDTransactionsRequest calls the generic PostApiAccountsAccountIDTransactions builder with application/json body
func NewPostApiAccountsAccountIDTransactionsRequest(server string, accountID AccountPathParam, body PostApiAccountsAccountIDTransactionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAccountsAccountIDTransactionsRequestWithBody(server, accountID, "application/json", bodyReader)
}

// NewPostApiAccountsAccountIDTransactionsRequestWithBody generates requests for PostApiAccountsAccountIDTransactions with any type of body
func NewPostApiAccountsAccountIDTransactionsRequestWithBody(server string, accountID AccountPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountID", runtime.ParamLocationPath, accountID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/accounts/%s/transactions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiMarketsMarketHistoryRequest generates requests for GetApiMarketsMarketHistory
func NewGetApiMarketsMarketHistoryRequest(server string, market MarketParam, params *GetApiMarketsMarketHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "market", runtime.ParamLocationPath, market)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/markets/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Increment != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "increment", runtime.ParamLocationQuery, *params.Increment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiMarketsMarketSnapshotRequest generates requests for GetApiMarketsMarketSnapshot
func NewGetApiMarketsMarketSnapshotRequest(server string, market MarketParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "market", runtime.ParamLocationPath, market)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/markets/%s/snapshot", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiAccounts request
	GetApiAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiAccountsResponse, error)

	// GetApiAccountsAccountID request
	GetApiAccountsAccountIDWithResponse(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*GetApiAccountsAccountIDResponse, error)

	// GetApiAccountsAccountIDAddressesSymbolName request
	GetApiAccountsAccountIDAddressesSymbolNameWithResponse(ctx context.Context, accountID AccountPathParam, symbolName SymbolPathParam, reqEditors ...RequestEditorFn) (*GetApiAccountsAccountIDAddressesSymbolNameResponse, error)

	// GetApiAccountsAccountIDCode request
	GetApiAccountsAccountIDCodeWithResponse(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*GetApiAccountsAccountIDCodeResponse, error)

	// GetApiAccountsAccountIDOrders request
	GetApiAccountsAccountIDOrdersWithResponse(ctx context.Context, accountID AccountPathParam, params *GetApiAccountsAccountIDOrdersParams, reqEditors ...RequestEditorFn) (*GetApiAccountsAccountIDOrdersResponse, error)

	// PostApiAccountsAccountIDOrders request with any body
	PostApiAccountsAccountIDOrdersWithBodyWithResponse(ctx context.Context, accountID AccountPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAccountsAccountIDOrdersResponse, error)

	PostApiAccountsAccountIDOrdersWithResponse(ctx context.Context, accountID AccountPathParam, body PostApiAccountsAccountIDOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAccountsAccountIDOrdersResponse, error)

	// GetApiAccountsAccountIDOrdersOrderID request
	GetApiAccountsAccountIDOrdersOrderIDWithResponse(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, reqEditors ...RequestEditorFn) (*GetApiAccountsAccountIDOrdersOrderIDResponse, error)

	// PatchApiAccountsAccountIDOrdersOrderID request with any body
	PatchApiAccountsAccountIDOrdersOrderIDWithBodyWithResponse(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiAccountsAccountIDOrdersOrderIDResponse, error)

	PatchApiAccountsAccountIDOrdersOrderIDWithResponse(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, body PatchApiAccountsAccountIDOrdersOrderIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiAccountsAccountIDOrdersOrderIDResponse, error)

	// GetApiAccountsAccountIDTransactions request
	GetApiAccountsAccountIDTransactionsWithResponse(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*GetApiAccountsAccountIDTransactionsResponse, error)

	// PostApiAccountsAccountIDTransactions request with any body
	PostApiAccountsAccountIDTransactionsWithBodyWithResponse(ctx context.Context, accountID AccountPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAccountsAccountIDTransactionsResponse, error)

	PostApiAccountsAccountIDTransactionsWithResponse(ctx context.Context, accountID AccountPathParam, body PostApiAccountsAccountIDTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAccountsAccountIDTransactionsResponse, error)

	// GetApiMarketsMarketHistory request
	GetApiMarketsMarketHistoryWithResponse(ctx context.Context, market MarketParam, params *GetApiMarketsMarketHistoryParams, reqEditors ...RequestEditorFn) (*GetApiMarketsMarketHistoryResponse, error)

	// GetApiMarketsMarketSnapshot request
	GetApiMarketsMarketSnapshotWithResponse(ctx context.Context, market MarketParam, reqEditors ...RequestEditorFn) (*GetApiMarketsMarketSnapshotResponse, error)
}

type GetApiAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data  *[]Account     `json:"data,omitempty"`
		Error *ResponseError `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiAccountsAccountIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Balances account
		Data  *Account       `json:"data,omitempty"`
		Error *ResponseError `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiAccountsAccountIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiAccountsAccountIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiAccountsAccountIDAddressesSymbolNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data  *AddressItem   `json:"data,omitempty"`
		Error *ResponseError `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiAccountsAccountIDAddressesSymbolNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiAccountsAccountIDAddressesSymbolNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiAccountsAccountIDCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiAccountsAccountIDCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiAccountsAccountIDCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiAccountsAccountIDOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data  *BookOrderList `json:"data,omitempty"`
		Error *ResponseError `json:"error,omitempty"`
	}
	JSON500 *struct {
		Error *ResponseError `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiAccountsAccountIDOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiAccountsAccountIDOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiAccountsAccountIDOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *BookOrder `json:"data,omitempty"`
	}
	JSON409 *struct {
		Error *ResponseError `json:"error,omitempty"`
	}
	JSON500 *struct {
		Error *ResponseError `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiAccountsAccountIDOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAccountsAccountIDOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiAccountsAccountIDOrdersOrderIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data  *BookOrder     `json:"data,omitempty"`
		Error *ResponseError `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiAccountsAccountIDOrdersOrderIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiAccountsAccountIDOrdersOrderIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiAccountsAccountIDOrdersOrderIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *BookOrder `json:"data,omitempty"`
	}
	JSON400 *struct {
		Error *ResponseError `json:"error,omitempty"`
	}
	JSON404 *struct {
		Error *ResponseError `json:"error,omitempty"`
	}
	JSON500 *struct {
		Error *ResponseError `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchApiAccountsAccountIDOrdersOrderIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiAccountsAccountIDOrdersOrderIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiAccountsAccountIDTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data  *TransactionList `json:"data,omitempty"`
		Error *ResponseError   `json:"error,omitempty"`
	}
	JSON500 *struct {
		Error *ResponseError `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiAccountsAccountIDTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiAccountsAccountIDTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiAccountsAccountIDTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Account balance change
		Data *Transaction `json:"data,omitempty"`
	}
	JSON400 *struct {
		Error *ResponseError `json:"error,omitempty"`
	}
	JSON409 *struct {
		Error *ResponseError `json:"error,omitempty"`
	}
	JSON500 *struct {
		Error *ResponseError `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiAccountsAccountIDTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAccountsAccountIDTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiMarketsMarketHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *PriceHistoryList `json:"data,omitempty"`
	}
	JSONDefault *struct {
		Error *ResponseError `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiMarketsMarketHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiMarketsMarketHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiMarketsMarketSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *SnapshotItemList `json:"data,omitempty"`
	}
	JSONDefault *struct {
		Error *ResponseError `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiMarketsMarketSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiMarketsMarketSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiAccountsWithResponse request returning *GetApiAccountsResponse
func (c *ClientWithResponses) GetApiAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiAccountsResponse, error) {
	rsp, err := c.GetApiAccounts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiAccountsResponse(rsp)
}

// GetApiAccountsAccountIDWithResponse request returning *GetApiAccountsAccountIDResponse
func (c *ClientWithResponses) GetApiAccountsAccountIDWithResponse(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*GetApiAccountsAccountIDResponse, error) {
	rsp, err := c.GetApiAccountsAccountID(ctx, accountID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiAccountsAccountIDResponse(rsp)
}

// GetApiAccountsAccountIDAddressesSymbolNameWithResponse request returning *GetApiAccountsAccountIDAddressesSymbolNameResponse
func (c *ClientWithResponses) GetApiAccountsAccountIDAddressesSymbolNameWithResponse(ctx context.Context, accountID AccountPathParam, symbolName SymbolPathParam, reqEditors ...RequestEditorFn) (*GetApiAccountsAccountIDAddressesSymbolNameResponse, error) {
	rsp, err := c.GetApiAccountsAccountIDAddressesSymbolName(ctx, accountID, symbolName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiAccountsAccountIDAddressesSymbolNameResponse(rsp)
}

// GetApiAccountsAccountIDCodeWithResponse request returning *GetApiAccountsAccountIDCodeResponse
func (c *ClientWithResponses) GetApiAccountsAccountIDCodeWithResponse(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*GetApiAccountsAccountIDCodeResponse, error) {
	rsp, err := c.GetApiAccountsAccountIDCode(ctx, accountID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiAccountsAccountIDCodeResponse(rsp)
}

// GetApiAccountsAccountIDOrdersWithResponse request returning *GetApiAccountsAccountIDOrdersResponse
func (c *ClientWithResponses) GetApiAccountsAccountIDOrdersWithResponse(ctx context.Context, accountID AccountPathParam, params *GetApiAccountsAccountIDOrdersParams, reqEditors ...RequestEditorFn) (*GetApiAccountsAccountIDOrdersResponse, error) {
	rsp, err := c.GetApiAccountsAccountIDOrders(ctx, accountID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiAccountsAccountIDOrdersResponse(rsp)
}

// PostApiAccountsAccountIDOrdersWithBodyWithResponse request with arbitrary body returning *PostApiAccountsAccountIDOrdersResponse
func (c *ClientWithResponses) PostApiAccountsAccountIDOrdersWithBodyWithResponse(ctx context.Context, accountID AccountPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAccountsAccountIDOrdersResponse, error) {
	rsp, err := c.PostApiAccountsAccountIDOrdersWithBody(ctx, accountID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAccountsAccountIDOrdersResponse(rsp)
}

func (c *ClientWithResponses) PostApiAccountsAccountIDOrdersWithResponse(ctx context.Context, accountID AccountPathParam, body PostApiAccountsAccountIDOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAccountsAccountIDOrdersResponse, error) {
	rsp, err := c.PostApiAccountsAccountIDOrders(ctx, accountID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAccountsAccountIDOrdersResponse(rsp)
}

// GetApiAccountsAccountIDOrdersOrderIDWithResponse request returning *GetApiAccountsAccountIDOrdersOrderIDResponse
func (c *ClientWithResponses) GetApiAccountsAccountIDOrdersOrderIDWithResponse(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, reqEditors ...RequestEditorFn) (*GetApiAccountsAccountIDOrdersOrderIDResponse, error) {
	rsp, err := c.GetApiAccountsAccountIDOrdersOrderID(ctx, accountID, orderID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiAccountsAccountIDOrdersOrderIDResponse(rsp)
}

// PatchApiAccountsAccountIDOrdersOrderIDWithBodyWithResponse request with arbitrary body returning *PatchApiAccountsAccountIDOrdersOrderIDResponse
func (c *ClientWithResponses) PatchApiAccountsAccountIDOrdersOrderIDWithBodyWithResponse(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiAccountsAccountIDOrdersOrderIDResponse, error) {
	rsp, err := c.PatchApiAccountsAccountIDOrdersOrderIDWithBody(ctx, accountID, orderID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiAccountsAccountIDOrdersOrderIDResponse(rsp)
}

func (c *ClientWithResponses) PatchApiAccountsAccountIDOrdersOrderIDWithResponse(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, body PatchApiAccountsAccountIDOrdersOrderIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiAccountsAccountIDOrdersOrderIDResponse, error) {
	rsp, err := c.PatchApiAccountsAccountIDOrdersOrderID(ctx, accountID, orderID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiAccountsAccountIDOrdersOrderIDResponse(rsp)
}

// GetApiAccountsAccountIDTransactionsWithResponse request returning *GetApiAccountsAccountIDTransactionsResponse
func (c *ClientWithResponses) GetApiAccountsAccountIDTransactionsWithResponse(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*GetApiAccountsAccountIDTransactionsResponse, error) {
	rsp, err := c.GetApiAccountsAccountIDTransactions(ctx, accountID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiAccountsAccountIDTransactionsResponse(rsp)
}

// PostApiAccountsAccountIDTransactionsWithBodyWithResponse request with arbitrary body returning *PostApiAccountsAccountIDTransactionsResponse
func (c *ClientWithResponses) PostApiAccountsAccountIDTransactionsWithBodyWithResponse(ctx context.Context, accountID AccountPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAccountsAccountIDTransactionsResponse, error) {
	rsp, err := c.PostApiAccountsAccountIDTransactionsWithBody(ctx, accountID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAccountsAccountIDTransactionsResponse(rsp)
}

func (c *ClientWithResponses) PostApiAccountsAccountIDTransactionsWithResponse(ctx context.Context, accountID AccountPathParam, body PostApiAccountsAccountIDTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAccountsAccountIDTransactionsResponse, error) {
	rsp, err := c.PostApiAccountsAccountIDTransactions(ctx, accountID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAccountsAccountIDTransactionsResponse(rsp)
}

// GetApiMarketsMarketHistoryWithResponse request returning *GetApiMarketsMarketHistoryResponse
func (c *ClientWithResponses) GetApiMarketsMarketHistoryWithResponse(ctx context.Context, market MarketParam, params *GetApiMarketsMarketHistoryParams, reqEditors ...RequestEditorFn) (*GetApiMarketsMarketHistoryResponse, error) {
	rsp, err := c.GetApiMarketsMarketHistory(ctx, market, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiMarketsMarketHistoryResponse(rsp)
}

// GetApiMarketsMarketSnapshotWithResponse request returning *GetApiMarketsMarketSnapshotResponse
func (c *ClientWithResponses) GetApiMarketsMarketSnapshotWithResponse(ctx context.Context, market MarketParam, reqEditors ...RequestEditorFn) (*GetApiMarketsMarketSnapshotResponse, error) {
	rsp, err := c.GetApiMarketsMarketSnapshot(ctx, market, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiMarketsMarketSnapshotResponse(rsp)
}

// ParseGetApiAccountsResponse parses an HTTP response from a GetApiAccountsWithResponse call
func ParseGetApiAccountsResponse(rsp *http.Response) (*GetApiAccountsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data  *[]Account     `json:"data,omitempty"`
			Error *ResponseError `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiAccountsAccountIDResponse parses an HTTP response from a GetApiAccountsAccountIDWithResponse call
func ParseGetApiAccountsAccountIDResponse(rsp *http.Response) (*GetApiAccountsAccountIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiAccountsAccountIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Balances account
			Data  *Account       `json:"data,omitempty"`
			Error *ResponseError `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiAccountsAccountIDAddressesSymbolNameResponse parses an HTTP response from a GetApiAccountsAccountIDAddressesSymbolNameWithResponse call
func ParseGetApiAccountsAccountIDAddressesSymbolNameResponse(rsp *http.Response) (*GetApiAccountsAccountIDAddressesSymbolNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiAccountsAccountIDAddressesSymbolNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data  *AddressItem   `json:"data,omitempty"`
			Error *ResponseError `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiAccountsAccountIDCodeResponse parses an HTTP response from a GetApiAccountsAccountIDCodeWithResponse call
func ParseGetApiAccountsAccountIDCodeResponse(rsp *http.Response) (*GetApiAccountsAccountIDCodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiAccountsAccountIDCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiAccountsAccountIDOrdersResponse parses an HTTP response from a GetApiAccountsAccountIDOrdersWithResponse call
func ParseGetApiAccountsAccountIDOrdersResponse(rsp *http.Response) (*GetApiAccountsAccountIDOrdersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiAccountsAccountIDOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data  *BookOrderList `json:"data,omitempty"`
			Error *ResponseError `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *ResponseError `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiAccountsAccountIDOrdersResponse parses an HTTP response from a PostApiAccountsAccountIDOrdersWithResponse call
func ParsePostApiAccountsAccountIDOrdersResponse(rsp *http.Response) (*PostApiAccountsAccountIDOrdersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAccountsAccountIDOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *BookOrder `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			Error *ResponseError `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *ResponseError `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiAccountsAccountIDOrdersOrderIDResponse parses an HTTP response from a GetApiAccountsAccountIDOrdersOrderIDWithResponse call
func ParseGetApiAccountsAccountIDOrdersOrderIDResponse(rsp *http.Response) (*GetApiAccountsAccountIDOrdersOrderIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiAccountsAccountIDOrdersOrderIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data  *BookOrder     `json:"data,omitempty"`
			Error *ResponseError `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchApiAccountsAccountIDOrdersOrderIDResponse parses an HTTP response from a PatchApiAccountsAccountIDOrdersOrderIDWithResponse call
func ParsePatchApiAccountsAccountIDOrdersOrderIDResponse(rsp *http.Response) (*PatchApiAccountsAccountIDOrdersOrderIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiAccountsAccountIDOrdersOrderIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *BookOrder `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *ResponseError `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error *ResponseError `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *ResponseError `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiAccountsAccountIDTransactionsResponse parses an HTTP response from a GetApiAccountsAccountIDTransactionsWithResponse call
func ParseGetApiAccountsAccountIDTransactionsResponse(rsp *http.Response) (*GetApiAccountsAccountIDTransactionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiAccountsAccountIDTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data  *TransactionList `json:"data,omitempty"`
			Error *ResponseError   `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *ResponseError `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiAccountsAccountIDTransactionsResponse parses an HTTP response from a PostApiAccountsAccountIDTransactionsWithResponse call
func ParsePostApiAccountsAccountIDTransactionsResponse(rsp *http.Response) (*PostApiAccountsAccountIDTransactionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAccountsAccountIDTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Account balance change
			Data *Transaction `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *ResponseError `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			Error *ResponseError `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *ResponseError `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiMarketsMarketHistoryResponse parses an HTTP response from a GetApiMarketsMarketHistoryWithResponse call
func ParseGetApiMarketsMarketHistoryResponse(rsp *http.Response) (*GetApiMarketsMarketHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiMarketsMarketHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *PriceHistoryList `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error *ResponseError `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetApiMarketsMarketSnapshotResponse parses an HTTP response from a GetApiMarketsMarketSnapshotWithResponse call
func ParseGetApiMarketsMarketSnapshotResponse(rsp *http.Response) (*GetApiMarketsMarketSnapshotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiMarketsMarketSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *SnapshotItemList `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error *ResponseError `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
