// Package restclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package restclient

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	OAuth2Scopes = "OAuth2.Scopes"
)

// Defines values for ActionType.
const (
	BUY  ActionType = "BUY"
	SELL ActionType = "SELL"
)

// Defines values for LimitOrderRequestName.
const (
	LimitOrderRequestNameLIMIT  LimitOrderRequestName = "LIMIT"
	LimitOrderRequestNameMARKET LimitOrderRequestName = "MARKET"
)

// Defines values for MarketOrderRequestName.
const (
	MarketOrderRequestNameLIMIT  MarketOrderRequestName = "LIMIT"
	MarketOrderRequestNameMARKET MarketOrderRequestName = "MARKET"
)

// Defines values for OrderStatus.
const (
	CANCELLED OrderStatus = "CANCELLED"
	FILLED    OrderStatus = "FILLED"
	OPEN      OrderStatus = "OPEN"
	PARTIAL   OrderStatus = "PARTIAL"
)

// Defines values for OrderTypeName.
const (
	LIMIT  OrderTypeName = "LIMIT"
	MARKET OrderTypeName = "MARKET"
)

// Defines values for RecipientType.
const (
	LOCAL  RecipientType = "LOCAL"
	REMOTE RecipientType = "REMOTE"
)

// Defines values for SymbolType.
const (
	BTC  SymbolType = "BTC"
	ETH  SymbolType = "ETH"
	USDT SymbolType = "USDT"
	XIFR SymbolType = "XIFR"
)

// Defines values for TimeSpanType.
const (
	N10m  TimeSpanType = "10m"
	N12h  TimeSpanType = "12h"
	N15m  TimeSpanType = "15m"
	N180d TimeSpanType = "180d"
	N1d   TimeSpanType = "1d"
	N1h   TimeSpanType = "1h"
	N1y   TimeSpanType = "1y"
	N2d   TimeSpanType = "2d"
	N2h   TimeSpanType = "2h"
	N2w   TimeSpanType = "2w"
	N30d  TimeSpanType = "30d"
	N30m  TimeSpanType = "30m"
	N4h   TimeSpanType = "4h"
	N5m   TimeSpanType = "5m"
	N7d   TimeSpanType = "7d"
	N8h   TimeSpanType = "8h"
	N90d  TimeSpanType = "90d"
)

// Defines values for TransactionStatus.
const (
	COMPLETED TransactionStatus = "COMPLETED"
	FAILED    TransactionStatus = "FAILED"
	INITIATED TransactionStatus = "INITIATED"
)

// Defines values for TransactionType.
const (
	DEPOSIT  TransactionType = "DEPOSIT"
	ORDER    TransactionType = "ORDER"
	TRANSFER TransactionType = "TRANSFER"
)

// Account Balances account
type Account struct {
	Balances *BalanceList `json:"balances,omitempty"`
	Id       string       `json:"id"`
	PublicId string       `json:"public_id"`
}

// ActionType Action type: * `BUY` - use base currency to buy target currency * `SELL` - sell target currency for base currency
type ActionType string

// AddressItem defines model for AddressItem.
type AddressItem struct {
	// Address Address hash for funding this balance
	Address string `json:"address"`

	// Symbol Symbol Type: * `BTC` - bitcoin currency identifier * `ETH` - ethereum currency identifier * `USDT` - U.S. Dollar stable coin (Tether) * `XIFR` - cipher mountain currency identifer
	Symbol SymbolType `json:"symbol"`
}

// BalanceItem defines model for BalanceItem.
type BalanceItem struct {
	Available CurrencyValue `json:"available"`
	Quantity  CurrencyValue `json:"quantity"`

	// Symbol Symbol Type: * `BTC` - bitcoin currency identifier * `ETH` - ethereum currency identifier * `USDT` - U.S. Dollar stable coin (Tether) * `XIFR` - cipher mountain currency identifer
	Symbol SymbolType `json:"symbol"`
}

// BalanceList defines model for BalanceList.
type BalanceList = []BalanceItem

// BookOrder defines model for BookOrder.
type BookOrder struct {
	Guid string `json:"guid"`

	// Order Request to create a new order on the order book
	Order OrderRequest `json:"order"`

	// Status Symbol Type: * `OPEN` - incomplete order * `PARTIAL` - partial order * `FILLED` - filled order * `CANCELLED` - cancelled order
	Status OrderStatus `json:"status"`
}

// BookOrderList defines model for BookOrderList.
type BookOrderList = []BookOrder

// CurrencyValue defines model for CurrencyValue.
type CurrencyValue = string

// LimitOrderRequest defines model for LimitOrderRequest.
type LimitOrderRequest struct {
	// Name Order type: * `MARKET` - order type used to buy or sell at market value * `LIMIT` - used to set buy or sell limit
	Name     LimitOrderRequestName `json:"name"`
	Price    CurrencyValue         `json:"price"`
	Quantity CurrencyValue         `json:"quantity"`
}

// LimitOrderRequestName Order type: * `MARKET` - order type used to buy or sell at market value * `LIMIT` - used to set buy or sell limit
type LimitOrderRequestName string

// MarketOrderRequest defines model for MarketOrderRequest.
type MarketOrderRequest struct {
	// Base Symbol Type: * `BTC` - bitcoin currency identifier * `ETH` - ethereum currency identifier * `USDT` - U.S. Dollar stable coin (Tether) * `XIFR` - cipher mountain currency identifer
	Base SymbolType `json:"base"`

	// Name Order type: * `MARKET` - order type used to buy or sell at market value * `LIMIT` - used to set buy or sell limit
	Name     MarketOrderRequestName `json:"name"`
	Quantity CurrencyValue          `json:"quantity"`
}

// MarketOrderRequestName Order type: * `MARKET` - order type used to buy or sell at market value * `LIMIT` - used to set buy or sell limit
type MarketOrderRequestName string

// OrderRequest Request to create a new order on the order book
type OrderRequest struct {
	// Action Action type: * `BUY` - use base currency to buy target currency * `SELL` - sell target currency for base currency
	Action ActionType `json:"action"`

	// Base Symbol Type: * `BTC` - bitcoin currency identifier * `ETH` - ethereum currency identifier * `USDT` - U.S. Dollar stable coin (Tether) * `XIFR` - cipher mountain currency identifer
	Base SymbolType `json:"base"`

	// Quote Symbol Type: * `BTC` - bitcoin currency identifier * `ETH` - ethereum currency identifier * `USDT` - U.S. Dollar stable coin (Tether) * `XIFR` - cipher mountain currency identifer
	Quote SymbolType       `json:"quote"`
	Type  OrderRequestType `json:"type"`
}

// OrderRequestType defines model for OrderRequestType.
type OrderRequestType struct {
	union json.RawMessage
}

// OrderStatus Symbol Type: * `OPEN` - incomplete order * `PARTIAL` - partial order * `FILLED` - filled order * `CANCELLED` - cancelled order
type OrderStatus string

// OrderType defines model for OrderType.
type OrderType struct {
	// Name Order type: * `MARKET` - order type used to buy or sell at market value * `LIMIT` - used to set buy or sell limit
	Name OrderTypeName `json:"name"`
}

// OrderTypeName Order type: * `MARKET` - order type used to buy or sell at market value * `LIMIT` - used to set buy or sell limit
type OrderTypeName string

// PatchCommand defines model for PatchCommand.
type PatchCommand struct {
	Op    string `json:"op"`
	Path  string `json:"path"`
	Value string `json:"value"`
}

// PatchCommandList defines model for PatchCommandList.
type PatchCommandList = []PatchCommand

// PriceHistoryItem Price history item
type PriceHistoryItem struct {
	Average string `json:"average"`

	// Close Last price in time span
	Close         string `json:"close"`
	LowerQuartile string `json:"lowerQuartile"`
	Maximum       string `json:"maximum"`
	Median        string `json:"median"`
	Minimum       string `json:"minimum"`

	// Open First price in time span
	Open string `json:"open"`

	// Span Time Span: * `5m` - 5 minutes
	Span          TimeSpanType `json:"span"`
	Start         string       `json:"start"`
	UpperQuartile string       `json:"upperQuartile"`

	// Volume Total volume during time span
	Volume string `json:"volume"`
}

// PriceHistoryList defines model for PriceHistoryList.
type PriceHistoryList = []PriceHistoryItem

// RecipientType Recipient Type: * `LOCAL` - recipient public id within Xifer system * `REMOTE` - recipient value is an address defined by the provided symbol
type RecipientType string

// ResponseError defines model for ResponseError.
type ResponseError struct {
	Detail string `json:"detail"`
}

// ResponseErrorList defines model for ResponseErrorList.
type ResponseErrorList = []ResponseError

// SnapshotItem Order book snapshot item
type SnapshotItem struct {
	Depth string `json:"depth"`
	Price string `json:"price"`
	Side  string `json:"side"`
}

// SnapshotItemList defines model for SnapshotItemList.
type SnapshotItemList = []SnapshotItem

// SymbolType Symbol Type: * `BTC` - bitcoin currency identifier * `ETH` - ethereum currency identifier * `USDT` - U.S. Dollar stable coin (Tether) * `XIFR` - cipher mountain currency identifer
type SymbolType string

// TimeSpanType Time Span: * `5m` - 5 minutes
type TimeSpanType string

// Transaction Account balance change
type Transaction struct {
	// Completed Time at which the transaction was processed. Refer to status for success or failure.
	Completed string        `json:"completed"`
	Fee       CurrencyValue `json:"fee"`
	Id        string        `json:"id"`

	// Initiated time at which the transaction was requested
	Initiated string        `json:"initiated"`
	Orderid   string        `json:"orderid"`
	Quantity  CurrencyValue `json:"quantity"`
	Receipt   string        `json:"receipt"`
	Recipient string        `json:"recipient"`

	// Status Transaction Status: * `INITIATED` - the transaction has been started * `COMPLETED` - the transaction was successful * `FAILED` - the transaction request failed
	Status TransactionStatus `json:"status"`

	// Symbol Symbol Type: * `BTC` - bitcoin currency identifier * `ETH` - ethereum currency identifier * `USDT` - U.S. Dollar stable coin (Tether) * `XIFR` - cipher mountain currency identifer
	Symbol SymbolType `json:"symbol"`

	// Type Transaction Type: * `ORDER` - transaction resulting from a match on the order book * `DEPOSIT` - transaction resulting from a funding deposit * `TRANSFER` - transaction resulting from a funding withdrawal
	Type TransactionType `json:"type"`

	// Where Recipient Type: * `LOCAL` - recipient public id within Xifer system * `REMOTE` - recipient value is an address defined by the provided symbol
	Where RecipientType `json:"where"`
}

// TransactionList defines model for TransactionList.
type TransactionList = []Transaction

// TransactionRequest Transfer funds locally between Xifer accounts or to an external account as a withdrawal.
type TransactionRequest struct {
	Quantity CurrencyValue `json:"quantity"`

	// Recipient Recipient represents a target identifier for which to send the defined funds. The format for the provided value is determined by the recipient type and symbol.
	Recipient string `json:"recipient"`

	// Symbol Symbol Type: * `BTC` - bitcoin currency identifier * `ETH` - ethereum currency identifier * `USDT` - U.S. Dollar stable coin (Tether) * `XIFR` - cipher mountain currency identifer
	Symbol SymbolType `json:"symbol"`

	// Type Recipient Type: * `LOCAL` - recipient public id within Xifer system * `REMOTE` - recipient value is an address defined by the provided symbol
	Type RecipientType `json:"type"`
}

// TransactionStatus Transaction Status: * `INITIATED` - the transaction has been started * `COMPLETED` - the transaction was successful * `FAILED` - the transaction request failed
type TransactionStatus string

// TransactionType Transaction Type: * `ORDER` - transaction resulting from a match on the order book * `DEPOSIT` - transaction resulting from a funding deposit * `TRANSFER` - transaction resulting from a funding withdrawal
type TransactionType string

// AccountPathParam defines model for AccountPathParam.
type AccountPathParam = string

// MarketParam defines model for MarketParam.
type MarketParam = string

// OrderPathParam defines model for OrderPathParam.
type OrderPathParam = string

// OrderStatusParam Symbol Type: * `OPEN` - incomplete order * `PARTIAL` - partial order * `FILLED` - filled order * `CANCELLED` - cancelled order
type OrderStatusParam = OrderStatus

// SymbolPathParam Symbol Type: * `BTC` - bitcoin currency identifier * `ETH` - ethereum currency identifier * `USDT` - U.S. Dollar stable coin (Tether) * `XIFR` - cipher mountain currency identifer
type SymbolPathParam = SymbolType

// TimeSpanParam Time Span: * `5m` - 5 minutes
type TimeSpanParam = TimeSpanType

// TransactionPathParam defines model for TransactionPathParam.
type TransactionPathParam = string

// GetV1AccountsAccountIDOrdersParams defines parameters for GetV1AccountsAccountIDOrders.
type GetV1AccountsAccountIDOrdersParams struct {
	Status *OrderStatusParam `form:"status,omitempty" json:"status,omitempty"`
}

// GetV1MarketsMarketHistoryParams defines parameters for GetV1MarketsMarketHistory.
type GetV1MarketsMarketHistoryParams struct {
	Increment *TimeSpanParam `form:"increment,omitempty" json:"increment,omitempty"`

	// Start Start time for history items
	Start *string `form:"start,omitempty" json:"start,omitempty"`

	// Limit Limit for how many history items to retreive (no more than the default 100)
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetV1MarketsMarketSnapshotParams defines parameters for GetV1MarketsMarketSnapshot.
type GetV1MarketsMarketSnapshotParams struct {
	// Asks include asks in snapshot
	Asks *bool `form:"asks,omitempty" json:"asks,omitempty"`

	// Bids include bids in snapshot
	Bids *bool `form:"bids,omitempty" json:"bids,omitempty"`
}

// PostV1AccountsAccountIDOrdersJSONRequestBody defines body for PostV1AccountsAccountIDOrders for application/json ContentType.
type PostV1AccountsAccountIDOrdersJSONRequestBody = OrderRequest

// PatchV1AccountsAccountIDOrdersOrderIDJSONRequestBody defines body for PatchV1AccountsAccountIDOrdersOrderID for application/json ContentType.
type PatchV1AccountsAccountIDOrdersOrderIDJSONRequestBody = PatchCommandList

// PostV1AccountsAccountIDTransactionsJSONRequestBody defines body for PostV1AccountsAccountIDTransactions for application/json ContentType.
type PostV1AccountsAccountIDTransactionsJSONRequestBody = TransactionRequest

// AsMarketOrderRequest returns the union data inside the OrderRequestType as a MarketOrderRequest
func (t OrderRequestType) AsMarketOrderRequest() (MarketOrderRequest, error) {
	var body MarketOrderRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMarketOrderRequest overwrites any union data inside the OrderRequestType as the provided MarketOrderRequest
func (t *OrderRequestType) FromMarketOrderRequest(v MarketOrderRequest) error {
	v.Name = "MarketOrderRequest"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMarketOrderRequest performs a merge with any union data inside the OrderRequestType, using the provided MarketOrderRequest
func (t *OrderRequestType) MergeMarketOrderRequest(v MarketOrderRequest) error {
	v.Name = "MarketOrderRequest"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLimitOrderRequest returns the union data inside the OrderRequestType as a LimitOrderRequest
func (t OrderRequestType) AsLimitOrderRequest() (LimitOrderRequest, error) {
	var body LimitOrderRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLimitOrderRequest overwrites any union data inside the OrderRequestType as the provided LimitOrderRequest
func (t *OrderRequestType) FromLimitOrderRequest(v LimitOrderRequest) error {
	v.Name = "LimitOrderRequest"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLimitOrderRequest performs a merge with any union data inside the OrderRequestType, using the provided LimitOrderRequest
func (t *OrderRequestType) MergeLimitOrderRequest(v LimitOrderRequest) error {
	v.Name = "LimitOrderRequest"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t OrderRequestType) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"name"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t OrderRequestType) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "LimitOrderRequest":
		return t.AsLimitOrderRequest()
	case "MarketOrderRequest":
		return t.AsMarketOrderRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t OrderRequestType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OrderRequestType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV1Accounts request
	GetV1Accounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AccountsAccountID request
	GetV1AccountsAccountID(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AccountsAccountIDAddressesSymbolName request
	GetV1AccountsAccountIDAddressesSymbolName(ctx context.Context, accountID AccountPathParam, symbolName SymbolPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AccountsAccountIDCode request
	GetV1AccountsAccountIDCode(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AccountsAccountIDOrders request
	GetV1AccountsAccountIDOrders(ctx context.Context, accountID AccountPathParam, params *GetV1AccountsAccountIDOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1AccountsAccountIDOrdersWithBody request with any body
	PostV1AccountsAccountIDOrdersWithBody(ctx context.Context, accountID AccountPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1AccountsAccountIDOrders(ctx context.Context, accountID AccountPathParam, body PostV1AccountsAccountIDOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AccountsAccountIDOrdersOrderID request
	GetV1AccountsAccountIDOrdersOrderID(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1AccountsAccountIDOrdersOrderIDWithBody request with any body
	PatchV1AccountsAccountIDOrdersOrderIDWithBody(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1AccountsAccountIDOrdersOrderID(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, body PatchV1AccountsAccountIDOrdersOrderIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AccountsAccountIDTransactions request
	GetV1AccountsAccountIDTransactions(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1AccountsAccountIDTransactionsWithBody request with any body
	PostV1AccountsAccountIDTransactionsWithBody(ctx context.Context, accountID AccountPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1AccountsAccountIDTransactions(ctx context.Context, accountID AccountPathParam, body PostV1AccountsAccountIDTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AccountsAccountIDTransactionsTransactionID request
	GetV1AccountsAccountIDTransactionsTransactionID(ctx context.Context, accountID AccountPathParam, transactionID TransactionPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MarketsMarketHistory request
	GetV1MarketsMarketHistory(ctx context.Context, market MarketParam, params *GetV1MarketsMarketHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MarketsMarketSnapshot request
	GetV1MarketsMarketSnapshot(ctx context.Context, market MarketParam, params *GetV1MarketsMarketSnapshotParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV1Accounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AccountsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AccountsAccountID(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AccountsAccountIDRequest(c.Server, accountID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AccountsAccountIDAddressesSymbolName(ctx context.Context, accountID AccountPathParam, symbolName SymbolPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AccountsAccountIDAddressesSymbolNameRequest(c.Server, accountID, symbolName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AccountsAccountIDCode(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AccountsAccountIDCodeRequest(c.Server, accountID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AccountsAccountIDOrders(ctx context.Context, accountID AccountPathParam, params *GetV1AccountsAccountIDOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AccountsAccountIDOrdersRequest(c.Server, accountID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AccountsAccountIDOrdersWithBody(ctx context.Context, accountID AccountPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AccountsAccountIDOrdersRequestWithBody(c.Server, accountID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AccountsAccountIDOrders(ctx context.Context, accountID AccountPathParam, body PostV1AccountsAccountIDOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AccountsAccountIDOrdersRequest(c.Server, accountID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AccountsAccountIDOrdersOrderID(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AccountsAccountIDOrdersOrderIDRequest(c.Server, accountID, orderID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1AccountsAccountIDOrdersOrderIDWithBody(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1AccountsAccountIDOrdersOrderIDRequestWithBody(c.Server, accountID, orderID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1AccountsAccountIDOrdersOrderID(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, body PatchV1AccountsAccountIDOrdersOrderIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1AccountsAccountIDOrdersOrderIDRequest(c.Server, accountID, orderID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AccountsAccountIDTransactions(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AccountsAccountIDTransactionsRequest(c.Server, accountID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AccountsAccountIDTransactionsWithBody(ctx context.Context, accountID AccountPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AccountsAccountIDTransactionsRequestWithBody(c.Server, accountID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AccountsAccountIDTransactions(ctx context.Context, accountID AccountPathParam, body PostV1AccountsAccountIDTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AccountsAccountIDTransactionsRequest(c.Server, accountID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AccountsAccountIDTransactionsTransactionID(ctx context.Context, accountID AccountPathParam, transactionID TransactionPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AccountsAccountIDTransactionsTransactionIDRequest(c.Server, accountID, transactionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MarketsMarketHistory(ctx context.Context, market MarketParam, params *GetV1MarketsMarketHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MarketsMarketHistoryRequest(c.Server, market, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MarketsMarketSnapshot(ctx context.Context, market MarketParam, params *GetV1MarketsMarketSnapshotParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MarketsMarketSnapshotRequest(c.Server, market, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV1AccountsRequest generates requests for GetV1Accounts
func NewGetV1AccountsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1AccountsAccountIDRequest generates requests for GetV1AccountsAccountID
func NewGetV1AccountsAccountIDRequest(server string, accountID AccountPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountID", runtime.ParamLocationPath, accountID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1AccountsAccountIDAddressesSymbolNameRequest generates requests for GetV1AccountsAccountIDAddressesSymbolName
func NewGetV1AccountsAccountIDAddressesSymbolNameRequest(server string, accountID AccountPathParam, symbolName SymbolPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountID", runtime.ParamLocationPath, accountID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "symbolName", runtime.ParamLocationPath, symbolName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/%s/addresses/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1AccountsAccountIDCodeRequest generates requests for GetV1AccountsAccountIDCode
func NewGetV1AccountsAccountIDCodeRequest(server string, accountID AccountPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountID", runtime.ParamLocationPath, accountID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/%s/code", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1AccountsAccountIDOrdersRequest generates requests for GetV1AccountsAccountIDOrders
func NewGetV1AccountsAccountIDOrdersRequest(server string, accountID AccountPathParam, params *GetV1AccountsAccountIDOrdersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountID", runtime.ParamLocationPath, accountID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/%s/orders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1AccountsAccountIDOrdersRequest calls the generic PostV1AccountsAccountIDOrders builder with application/json body
func NewPostV1AccountsAccountIDOrdersRequest(server string, accountID AccountPathParam, body PostV1AccountsAccountIDOrdersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1AccountsAccountIDOrdersRequestWithBody(server, accountID, "application/json", bodyReader)
}

// NewPostV1AccountsAccountIDOrdersRequestWithBody generates requests for PostV1AccountsAccountIDOrders with any type of body
func NewPostV1AccountsAccountIDOrdersRequestWithBody(server string, accountID AccountPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountID", runtime.ParamLocationPath, accountID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/%s/orders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1AccountsAccountIDOrdersOrderIDRequest generates requests for GetV1AccountsAccountIDOrdersOrderID
func NewGetV1AccountsAccountIDOrdersOrderIDRequest(server string, accountID AccountPathParam, orderID OrderPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountID", runtime.ParamLocationPath, accountID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orderID", runtime.ParamLocationPath, orderID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/%s/orders/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1AccountsAccountIDOrdersOrderIDRequest calls the generic PatchV1AccountsAccountIDOrdersOrderID builder with application/json body
func NewPatchV1AccountsAccountIDOrdersOrderIDRequest(server string, accountID AccountPathParam, orderID OrderPathParam, body PatchV1AccountsAccountIDOrdersOrderIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1AccountsAccountIDOrdersOrderIDRequestWithBody(server, accountID, orderID, "application/json", bodyReader)
}

// NewPatchV1AccountsAccountIDOrdersOrderIDRequestWithBody generates requests for PatchV1AccountsAccountIDOrdersOrderID with any type of body
func NewPatchV1AccountsAccountIDOrdersOrderIDRequestWithBody(server string, accountID AccountPathParam, orderID OrderPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountID", runtime.ParamLocationPath, accountID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orderID", runtime.ParamLocationPath, orderID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/%s/orders/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1AccountsAccountIDTransactionsRequest generates requests for GetV1AccountsAccountIDTransactions
func NewGetV1AccountsAccountIDTransactionsRequest(server string, accountID AccountPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountID", runtime.ParamLocationPath, accountID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/%s/transactions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1AccountsAccountIDTransactionsRequest calls the generic PostV1AccountsAccountIDTransactions builder with application/json body
func NewPostV1AccountsAccountIDTransactionsRequest(server string, accountID AccountPathParam, body PostV1AccountsAccountIDTransactionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1AccountsAccountIDTransactionsRequestWithBody(server, accountID, "application/json", bodyReader)
}

// NewPostV1AccountsAccountIDTransactionsRequestWithBody generates requests for PostV1AccountsAccountIDTransactions with any type of body
func NewPostV1AccountsAccountIDTransactionsRequestWithBody(server string, accountID AccountPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountID", runtime.ParamLocationPath, accountID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/%s/transactions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1AccountsAccountIDTransactionsTransactionIDRequest generates requests for GetV1AccountsAccountIDTransactionsTransactionID
func NewGetV1AccountsAccountIDTransactionsTransactionIDRequest(server string, accountID AccountPathParam, transactionID TransactionPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountID", runtime.ParamLocationPath, accountID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "transactionID", runtime.ParamLocationPath, transactionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/%s/transactions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MarketsMarketHistoryRequest generates requests for GetV1MarketsMarketHistory
func NewGetV1MarketsMarketHistoryRequest(server string, market MarketParam, params *GetV1MarketsMarketHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "market", runtime.ParamLocationPath, market)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/markets/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Increment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "increment", runtime.ParamLocationQuery, *params.Increment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MarketsMarketSnapshotRequest generates requests for GetV1MarketsMarketSnapshot
func NewGetV1MarketsMarketSnapshotRequest(server string, market MarketParam, params *GetV1MarketsMarketSnapshotParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "market", runtime.ParamLocationPath, market)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/markets/%s/snapshot", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Asks != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asks", runtime.ParamLocationQuery, *params.Asks); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Bids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bids", runtime.ParamLocationQuery, *params.Bids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV1AccountsWithResponse request
	GetV1AccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AccountsResponse, error)

	// GetV1AccountsAccountIDWithResponse request
	GetV1AccountsAccountIDWithResponse(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*GetV1AccountsAccountIDResponse, error)

	// GetV1AccountsAccountIDAddressesSymbolNameWithResponse request
	GetV1AccountsAccountIDAddressesSymbolNameWithResponse(ctx context.Context, accountID AccountPathParam, symbolName SymbolPathParam, reqEditors ...RequestEditorFn) (*GetV1AccountsAccountIDAddressesSymbolNameResponse, error)

	// GetV1AccountsAccountIDCodeWithResponse request
	GetV1AccountsAccountIDCodeWithResponse(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*GetV1AccountsAccountIDCodeResponse, error)

	// GetV1AccountsAccountIDOrdersWithResponse request
	GetV1AccountsAccountIDOrdersWithResponse(ctx context.Context, accountID AccountPathParam, params *GetV1AccountsAccountIDOrdersParams, reqEditors ...RequestEditorFn) (*GetV1AccountsAccountIDOrdersResponse, error)

	// PostV1AccountsAccountIDOrdersWithBodyWithResponse request with any body
	PostV1AccountsAccountIDOrdersWithBodyWithResponse(ctx context.Context, accountID AccountPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AccountsAccountIDOrdersResponse, error)

	PostV1AccountsAccountIDOrdersWithResponse(ctx context.Context, accountID AccountPathParam, body PostV1AccountsAccountIDOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AccountsAccountIDOrdersResponse, error)

	// GetV1AccountsAccountIDOrdersOrderIDWithResponse request
	GetV1AccountsAccountIDOrdersOrderIDWithResponse(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, reqEditors ...RequestEditorFn) (*GetV1AccountsAccountIDOrdersOrderIDResponse, error)

	// PatchV1AccountsAccountIDOrdersOrderIDWithBodyWithResponse request with any body
	PatchV1AccountsAccountIDOrdersOrderIDWithBodyWithResponse(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1AccountsAccountIDOrdersOrderIDResponse, error)

	PatchV1AccountsAccountIDOrdersOrderIDWithResponse(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, body PatchV1AccountsAccountIDOrdersOrderIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1AccountsAccountIDOrdersOrderIDResponse, error)

	// GetV1AccountsAccountIDTransactionsWithResponse request
	GetV1AccountsAccountIDTransactionsWithResponse(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*GetV1AccountsAccountIDTransactionsResponse, error)

	// PostV1AccountsAccountIDTransactionsWithBodyWithResponse request with any body
	PostV1AccountsAccountIDTransactionsWithBodyWithResponse(ctx context.Context, accountID AccountPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AccountsAccountIDTransactionsResponse, error)

	PostV1AccountsAccountIDTransactionsWithResponse(ctx context.Context, accountID AccountPathParam, body PostV1AccountsAccountIDTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AccountsAccountIDTransactionsResponse, error)

	// GetV1AccountsAccountIDTransactionsTransactionIDWithResponse request
	GetV1AccountsAccountIDTransactionsTransactionIDWithResponse(ctx context.Context, accountID AccountPathParam, transactionID TransactionPathParam, reqEditors ...RequestEditorFn) (*GetV1AccountsAccountIDTransactionsTransactionIDResponse, error)

	// GetV1MarketsMarketHistoryWithResponse request
	GetV1MarketsMarketHistoryWithResponse(ctx context.Context, market MarketParam, params *GetV1MarketsMarketHistoryParams, reqEditors ...RequestEditorFn) (*GetV1MarketsMarketHistoryResponse, error)

	// GetV1MarketsMarketSnapshotWithResponse request
	GetV1MarketsMarketSnapshotWithResponse(ctx context.Context, market MarketParam, params *GetV1MarketsMarketSnapshotParams, reqEditors ...RequestEditorFn) (*GetV1MarketsMarketSnapshotResponse, error)
}

type GetV1AccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data   *[]Account         `json:"data,omitempty"`
		Errors *ResponseErrorList `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1AccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AccountsAccountIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Balances account
		Data   *Account           `json:"data,omitempty"`
		Errors *ResponseErrorList `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1AccountsAccountIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AccountsAccountIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AccountsAccountIDAddressesSymbolNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data   *AddressItem       `json:"data,omitempty"`
		Errors *ResponseErrorList `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1AccountsAccountIDAddressesSymbolNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AccountsAccountIDAddressesSymbolNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AccountsAccountIDCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV1AccountsAccountIDCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AccountsAccountIDCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AccountsAccountIDOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data   *BookOrderList     `json:"data,omitempty"`
		Errors *ResponseErrorList `json:"errors,omitempty"`
	}
	JSON500 *struct {
		Errors *ResponseErrorList `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1AccountsAccountIDOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AccountsAccountIDOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1AccountsAccountIDOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *BookOrder `json:"data,omitempty"`
	}
	JSON409 *struct {
		Errors *ResponseErrorList `json:"errors,omitempty"`
	}
	JSON500 *struct {
		Errors *ResponseErrorList `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1AccountsAccountIDOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1AccountsAccountIDOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AccountsAccountIDOrdersOrderIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data   *BookOrder         `json:"data,omitempty"`
		Errors *ResponseErrorList `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1AccountsAccountIDOrdersOrderIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AccountsAccountIDOrdersOrderIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1AccountsAccountIDOrdersOrderIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *BookOrder `json:"data,omitempty"`
	}
	JSON400 *struct {
		Errors *ResponseErrorList `json:"errors,omitempty"`
	}
	JSON404 *struct {
		Errors *ResponseErrorList `json:"errors,omitempty"`
	}
	JSON500 *struct {
		Errors *ResponseErrorList `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchV1AccountsAccountIDOrdersOrderIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1AccountsAccountIDOrdersOrderIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AccountsAccountIDTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data   *TransactionList   `json:"data,omitempty"`
		Errors *ResponseErrorList `json:"errors,omitempty"`
	}
	JSON500 *struct {
		Errors *ResponseErrorList `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1AccountsAccountIDTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AccountsAccountIDTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1AccountsAccountIDTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Account balance change
		Data *Transaction `json:"data,omitempty"`
	}
	JSON400 *struct {
		Errors *ResponseErrorList `json:"errors,omitempty"`
	}
	JSON409 *struct {
		Errors *ResponseErrorList `json:"errors,omitempty"`
	}
	JSON500 *struct {
		Errors *ResponseErrorList `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1AccountsAccountIDTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1AccountsAccountIDTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AccountsAccountIDTransactionsTransactionIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Account balance change
		Data   *Transaction       `json:"data,omitempty"`
		Errors *ResponseErrorList `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1AccountsAccountIDTransactionsTransactionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AccountsAccountIDTransactionsTransactionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MarketsMarketHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *PriceHistoryList `json:"data,omitempty"`
	}
	JSONDefault *struct {
		Errors *ResponseErrorList `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1MarketsMarketHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MarketsMarketHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MarketsMarketSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *SnapshotItemList `json:"data,omitempty"`
	}
	JSONDefault *struct {
		Errors *ResponseErrorList `json:"errors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1MarketsMarketSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MarketsMarketSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV1AccountsWithResponse request returning *GetV1AccountsResponse
func (c *ClientWithResponses) GetV1AccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AccountsResponse, error) {
	rsp, err := c.GetV1Accounts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AccountsResponse(rsp)
}

// GetV1AccountsAccountIDWithResponse request returning *GetV1AccountsAccountIDResponse
func (c *ClientWithResponses) GetV1AccountsAccountIDWithResponse(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*GetV1AccountsAccountIDResponse, error) {
	rsp, err := c.GetV1AccountsAccountID(ctx, accountID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AccountsAccountIDResponse(rsp)
}

// GetV1AccountsAccountIDAddressesSymbolNameWithResponse request returning *GetV1AccountsAccountIDAddressesSymbolNameResponse
func (c *ClientWithResponses) GetV1AccountsAccountIDAddressesSymbolNameWithResponse(ctx context.Context, accountID AccountPathParam, symbolName SymbolPathParam, reqEditors ...RequestEditorFn) (*GetV1AccountsAccountIDAddressesSymbolNameResponse, error) {
	rsp, err := c.GetV1AccountsAccountIDAddressesSymbolName(ctx, accountID, symbolName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AccountsAccountIDAddressesSymbolNameResponse(rsp)
}

// GetV1AccountsAccountIDCodeWithResponse request returning *GetV1AccountsAccountIDCodeResponse
func (c *ClientWithResponses) GetV1AccountsAccountIDCodeWithResponse(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*GetV1AccountsAccountIDCodeResponse, error) {
	rsp, err := c.GetV1AccountsAccountIDCode(ctx, accountID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AccountsAccountIDCodeResponse(rsp)
}

// GetV1AccountsAccountIDOrdersWithResponse request returning *GetV1AccountsAccountIDOrdersResponse
func (c *ClientWithResponses) GetV1AccountsAccountIDOrdersWithResponse(ctx context.Context, accountID AccountPathParam, params *GetV1AccountsAccountIDOrdersParams, reqEditors ...RequestEditorFn) (*GetV1AccountsAccountIDOrdersResponse, error) {
	rsp, err := c.GetV1AccountsAccountIDOrders(ctx, accountID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AccountsAccountIDOrdersResponse(rsp)
}

// PostV1AccountsAccountIDOrdersWithBodyWithResponse request with arbitrary body returning *PostV1AccountsAccountIDOrdersResponse
func (c *ClientWithResponses) PostV1AccountsAccountIDOrdersWithBodyWithResponse(ctx context.Context, accountID AccountPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AccountsAccountIDOrdersResponse, error) {
	rsp, err := c.PostV1AccountsAccountIDOrdersWithBody(ctx, accountID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AccountsAccountIDOrdersResponse(rsp)
}

func (c *ClientWithResponses) PostV1AccountsAccountIDOrdersWithResponse(ctx context.Context, accountID AccountPathParam, body PostV1AccountsAccountIDOrdersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AccountsAccountIDOrdersResponse, error) {
	rsp, err := c.PostV1AccountsAccountIDOrders(ctx, accountID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AccountsAccountIDOrdersResponse(rsp)
}

// GetV1AccountsAccountIDOrdersOrderIDWithResponse request returning *GetV1AccountsAccountIDOrdersOrderIDResponse
func (c *ClientWithResponses) GetV1AccountsAccountIDOrdersOrderIDWithResponse(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, reqEditors ...RequestEditorFn) (*GetV1AccountsAccountIDOrdersOrderIDResponse, error) {
	rsp, err := c.GetV1AccountsAccountIDOrdersOrderID(ctx, accountID, orderID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AccountsAccountIDOrdersOrderIDResponse(rsp)
}

// PatchV1AccountsAccountIDOrdersOrderIDWithBodyWithResponse request with arbitrary body returning *PatchV1AccountsAccountIDOrdersOrderIDResponse
func (c *ClientWithResponses) PatchV1AccountsAccountIDOrdersOrderIDWithBodyWithResponse(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1AccountsAccountIDOrdersOrderIDResponse, error) {
	rsp, err := c.PatchV1AccountsAccountIDOrdersOrderIDWithBody(ctx, accountID, orderID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1AccountsAccountIDOrdersOrderIDResponse(rsp)
}

func (c *ClientWithResponses) PatchV1AccountsAccountIDOrdersOrderIDWithResponse(ctx context.Context, accountID AccountPathParam, orderID OrderPathParam, body PatchV1AccountsAccountIDOrdersOrderIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1AccountsAccountIDOrdersOrderIDResponse, error) {
	rsp, err := c.PatchV1AccountsAccountIDOrdersOrderID(ctx, accountID, orderID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1AccountsAccountIDOrdersOrderIDResponse(rsp)
}

// GetV1AccountsAccountIDTransactionsWithResponse request returning *GetV1AccountsAccountIDTransactionsResponse
func (c *ClientWithResponses) GetV1AccountsAccountIDTransactionsWithResponse(ctx context.Context, accountID AccountPathParam, reqEditors ...RequestEditorFn) (*GetV1AccountsAccountIDTransactionsResponse, error) {
	rsp, err := c.GetV1AccountsAccountIDTransactions(ctx, accountID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AccountsAccountIDTransactionsResponse(rsp)
}

// PostV1AccountsAccountIDTransactionsWithBodyWithResponse request with arbitrary body returning *PostV1AccountsAccountIDTransactionsResponse
func (c *ClientWithResponses) PostV1AccountsAccountIDTransactionsWithBodyWithResponse(ctx context.Context, accountID AccountPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AccountsAccountIDTransactionsResponse, error) {
	rsp, err := c.PostV1AccountsAccountIDTransactionsWithBody(ctx, accountID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AccountsAccountIDTransactionsResponse(rsp)
}

func (c *ClientWithResponses) PostV1AccountsAccountIDTransactionsWithResponse(ctx context.Context, accountID AccountPathParam, body PostV1AccountsAccountIDTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AccountsAccountIDTransactionsResponse, error) {
	rsp, err := c.PostV1AccountsAccountIDTransactions(ctx, accountID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AccountsAccountIDTransactionsResponse(rsp)
}

// GetV1AccountsAccountIDTransactionsTransactionIDWithResponse request returning *GetV1AccountsAccountIDTransactionsTransactionIDResponse
func (c *ClientWithResponses) GetV1AccountsAccountIDTransactionsTransactionIDWithResponse(ctx context.Context, accountID AccountPathParam, transactionID TransactionPathParam, reqEditors ...RequestEditorFn) (*GetV1AccountsAccountIDTransactionsTransactionIDResponse, error) {
	rsp, err := c.GetV1AccountsAccountIDTransactionsTransactionID(ctx, accountID, transactionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AccountsAccountIDTransactionsTransactionIDResponse(rsp)
}

// GetV1MarketsMarketHistoryWithResponse request returning *GetV1MarketsMarketHistoryResponse
func (c *ClientWithResponses) GetV1MarketsMarketHistoryWithResponse(ctx context.Context, market MarketParam, params *GetV1MarketsMarketHistoryParams, reqEditors ...RequestEditorFn) (*GetV1MarketsMarketHistoryResponse, error) {
	rsp, err := c.GetV1MarketsMarketHistory(ctx, market, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MarketsMarketHistoryResponse(rsp)
}

// GetV1MarketsMarketSnapshotWithResponse request returning *GetV1MarketsMarketSnapshotResponse
func (c *ClientWithResponses) GetV1MarketsMarketSnapshotWithResponse(ctx context.Context, market MarketParam, params *GetV1MarketsMarketSnapshotParams, reqEditors ...RequestEditorFn) (*GetV1MarketsMarketSnapshotResponse, error) {
	rsp, err := c.GetV1MarketsMarketSnapshot(ctx, market, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MarketsMarketSnapshotResponse(rsp)
}

// ParseGetV1AccountsResponse parses an HTTP response from a GetV1AccountsWithResponse call
func ParseGetV1AccountsResponse(rsp *http.Response) (*GetV1AccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data   *[]Account         `json:"data,omitempty"`
			Errors *ResponseErrorList `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1AccountsAccountIDResponse parses an HTTP response from a GetV1AccountsAccountIDWithResponse call
func ParseGetV1AccountsAccountIDResponse(rsp *http.Response) (*GetV1AccountsAccountIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AccountsAccountIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Balances account
			Data   *Account           `json:"data,omitempty"`
			Errors *ResponseErrorList `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1AccountsAccountIDAddressesSymbolNameResponse parses an HTTP response from a GetV1AccountsAccountIDAddressesSymbolNameWithResponse call
func ParseGetV1AccountsAccountIDAddressesSymbolNameResponse(rsp *http.Response) (*GetV1AccountsAccountIDAddressesSymbolNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AccountsAccountIDAddressesSymbolNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data   *AddressItem       `json:"data,omitempty"`
			Errors *ResponseErrorList `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1AccountsAccountIDCodeResponse parses an HTTP response from a GetV1AccountsAccountIDCodeWithResponse call
func ParseGetV1AccountsAccountIDCodeResponse(rsp *http.Response) (*GetV1AccountsAccountIDCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AccountsAccountIDCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1AccountsAccountIDOrdersResponse parses an HTTP response from a GetV1AccountsAccountIDOrdersWithResponse call
func ParseGetV1AccountsAccountIDOrdersResponse(rsp *http.Response) (*GetV1AccountsAccountIDOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AccountsAccountIDOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data   *BookOrderList     `json:"data,omitempty"`
			Errors *ResponseErrorList `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Errors *ResponseErrorList `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV1AccountsAccountIDOrdersResponse parses an HTTP response from a PostV1AccountsAccountIDOrdersWithResponse call
func ParsePostV1AccountsAccountIDOrdersResponse(rsp *http.Response) (*PostV1AccountsAccountIDOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1AccountsAccountIDOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *BookOrder `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			Errors *ResponseErrorList `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Errors *ResponseErrorList `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1AccountsAccountIDOrdersOrderIDResponse parses an HTTP response from a GetV1AccountsAccountIDOrdersOrderIDWithResponse call
func ParseGetV1AccountsAccountIDOrdersOrderIDResponse(rsp *http.Response) (*GetV1AccountsAccountIDOrdersOrderIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AccountsAccountIDOrdersOrderIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data   *BookOrder         `json:"data,omitempty"`
			Errors *ResponseErrorList `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV1AccountsAccountIDOrdersOrderIDResponse parses an HTTP response from a PatchV1AccountsAccountIDOrdersOrderIDWithResponse call
func ParsePatchV1AccountsAccountIDOrdersOrderIDResponse(rsp *http.Response) (*PatchV1AccountsAccountIDOrdersOrderIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1AccountsAccountIDOrdersOrderIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *BookOrder `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Errors *ResponseErrorList `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Errors *ResponseErrorList `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Errors *ResponseErrorList `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1AccountsAccountIDTransactionsResponse parses an HTTP response from a GetV1AccountsAccountIDTransactionsWithResponse call
func ParseGetV1AccountsAccountIDTransactionsResponse(rsp *http.Response) (*GetV1AccountsAccountIDTransactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AccountsAccountIDTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data   *TransactionList   `json:"data,omitempty"`
			Errors *ResponseErrorList `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Errors *ResponseErrorList `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV1AccountsAccountIDTransactionsResponse parses an HTTP response from a PostV1AccountsAccountIDTransactionsWithResponse call
func ParsePostV1AccountsAccountIDTransactionsResponse(rsp *http.Response) (*PostV1AccountsAccountIDTransactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1AccountsAccountIDTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Account balance change
			Data *Transaction `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Errors *ResponseErrorList `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			Errors *ResponseErrorList `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Errors *ResponseErrorList `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1AccountsAccountIDTransactionsTransactionIDResponse parses an HTTP response from a GetV1AccountsAccountIDTransactionsTransactionIDWithResponse call
func ParseGetV1AccountsAccountIDTransactionsTransactionIDResponse(rsp *http.Response) (*GetV1AccountsAccountIDTransactionsTransactionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AccountsAccountIDTransactionsTransactionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Account balance change
			Data   *Transaction       `json:"data,omitempty"`
			Errors *ResponseErrorList `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MarketsMarketHistoryResponse parses an HTTP response from a GetV1MarketsMarketHistoryWithResponse call
func ParseGetV1MarketsMarketHistoryResponse(rsp *http.Response) (*GetV1MarketsMarketHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MarketsMarketHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *PriceHistoryList `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *ResponseErrorList `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV1MarketsMarketSnapshotResponse parses an HTTP response from a GetV1MarketsMarketSnapshotWithResponse call
func ParseGetV1MarketsMarketSnapshotResponse(rsp *http.Response) (*GetV1MarketsMarketSnapshotResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MarketsMarketSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *SnapshotItemList `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Errors *ResponseErrorList `json:"errors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
